allprojects {
  apply plugin: 'eclipse'
  apply plugin: 'idea'
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'maven'
  apply plugin: 'signing'

  ext {
    projectVersion = '1.6'
    gdxVersion = '1.9.2'
    isSnapshot = '-SNAPSHOT'
    libVersion = "$projectVersion.$gdxVersion$isSnapshot"
    wagonVersion = '2.10'
    isReleaseVersion = !libVersion.endsWith("SNAPSHOT")
  }

  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
  }

  sourceCompatibility = 1.6
  group = 'com.github.czyzby'
  version = libVersion
  archivesBaseName = projectName
  eclipse.project.name = projectName

  configurations {
    deployerJars
  }

  jar {
    from project.sourceSets.main.allSource
    from project.sourceSets.main.output
    baseName = archivesBaseName
  }

  dependencies {
    compile "com.badlogicgames.gdx:gdx:$gdxVersion"
    deployerJars "org.apache.maven.wagon:wagon-ssh:$wagonVersion"
    deployerJars "org.apache.maven.wagon:wagon-http:$wagonVersion"
  }

  task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
  }

  task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  artifacts {
    archives javadocJar, sourcesJar
  }

  signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
  }

  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
          authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
          authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        pom.project {
          name = projectName
          packaging 'jar'
          description = projectDesc
          url 'http://github.com/czyzby/gdx-lml'

          licenses {
            license {
              name 'The Apache License, Version 2.0'
              url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
          }
          
          scm {
            connection 'scm:git:git@github.com:czyzby/gdx-lml.git'
            developerConnection 'scm:git:git@github.com:czyzby/gdx-lml.git'
            url 'http://github.com/czyzby/gdx-lml/'
          }

          developers {
            developer {
              id 'mj'
              name 'MJ'
              email 'john.hervicc@gmail.com'
            }
          }
        }
      }
    }
  }
}

// Invokes 'build' and 'install' tasks on all projects in the correct order.
// Prefer this over 'gradle build install' when changing the version of library.
task installAll(dependsOn: ['installBase', 'lml-vis:build', 'lml-vis:install',
  'mvc:build', 'mvc:install', 'autumn/natives/android:build',
  'autumn/natives/android:install', 'autumn/natives/fcs:build',
  'autumn/natives/fcs:install', 'autumn/natives/gwt:build',
  'autumn/natives/gwt:install', 'websocket/natives/common:build',
  'websocket/natives/common:install', 'websocket/natives/gwt:build',
  'websocket/natives/gwt:install', 'websocket/natives/serialization:build',
  'websocket/natives/serialization:install']) 
task installBase(dependsOn: ['installKiwi', 'lml:build', 'lml:install',
  'autumn:build', 'autumn:install', 'websocket:build', 'websocket:install'])
task installKiwi(dependsOn: ['kiwi:build', 'kiwi:install'])

tasks.eclipse.doLast {
  delete ".project"
  delete ".classpath"
  delete ".settings/"
}
